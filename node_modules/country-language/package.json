{
  "_args": [
    [
      {
        "raw": "country-language@^0.1.7",
        "scope": null,
        "escapedName": "country-language",
        "name": "country-language",
        "rawSpec": "^0.1.7",
        "spec": ">=0.1.7 <0.2.0",
        "type": "range"
      },
      "/home/larisa/Documents/weather-api/node_modules/@ladjs/i18n"
    ]
  ],
  "_from": "country-language@>=0.1.7 <0.2.0",
  "_id": "country-language@0.1.7",
  "_inCache": true,
  "_location": "/country-language",
  "_npmUser": {
    "name": "bdswiss",
    "email": "opensource@bdswiss.com"
  },
  "_npmVersion": "1.3.24",
  "_phantomChildren": {},
  "_requested": {
    "raw": "country-language@^0.1.7",
    "scope": null,
    "escapedName": "country-language",
    "name": "country-language",
    "rawSpec": "^0.1.7",
    "spec": ">=0.1.7 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ladjs/i18n"
  ],
  "_resolved": "https://registry.npmjs.org/country-language/-/country-language-0.1.7.tgz",
  "_shasum": "7870f4ba125db9a6071f19737bd9ef9343ae35db",
  "_shrinkwrap": null,
  "_spec": "country-language@^0.1.7",
  "_where": "/home/larisa/Documents/weather-api/node_modules/@ladjs/i18n",
  "author": {
    "name": "Tassos Diamantidis",
    "email": "tassos@inruntime.com"
  },
  "bugs": {
    "url": "https://github.com/bdswiss/country-language/issues",
    "email": "opensource@bdswiss.com"
  },
  "dependencies": {
    "underscore": "~1.7.0",
    "underscore.deep": "~0.5.1"
  },
  "description": "Query languages spoken to a country or countries where people speak a language.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "7870f4ba125db9a6071f19737bd9ef9343ae35db",
    "tarball": "https://registry.npmjs.org/country-language/-/country-language-0.1.7.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/bdswiss/country-language#readme",
  "keywords": [
    "country",
    "language",
    "native",
    "node"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bdswiss",
      "email": "opensource@bdswiss.com"
    }
  ],
  "name": "country-language",
  "optionalDependencies": {},
  "readme": "country-language\n==========\n\n> Query any country's spoken languages or countries where a language is spoken.\n\n## Installation\n\n### Node.js\n\n`country-language` is available on [npm](https://www.npmjs.org/package/country-language).\n\n    $ npm install country-language\n\n## Usage\n\nOnce you require `country-language`, the following API will be available.\n\n```js\nvar CountryLanguage = require('country-language');\n```\n\n### .getLanguageCodes (languageCodeType, cb)\n\n* **@param** _{String}_ language code type. Acceptable values: 1, 2 or 3.\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ array String with language codes\n\nAcceptable language code type parameter values: 1, 2, 3 for returning ISO-639-1, ISO-639-2, ISO-639-3 codes respectively.\nIf not provided, ISO-639-1 codes will be returned.\n\n```js\nvar allLanguageCodes = CountryLanguage.getLanguageCodes(2);\n```\n\n### .getCountryCodes (countryCodeType, cb)\n\n* **@param** _{String}_ country code type. Acceptable values: 1, 2 or 3.\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ array String with country codes\n\nAcceptable country code type parameter values: 1, 2, 3 for returning numerical code, alpha-2, alpha-3 codes respectively.\nIf not provided, alpha-2 codes will be returned.\n\n```js\nvar allCountryCodes = CountryLanguage.getCountryCodes(2);\n```\n\n### .languageCodeExists (languageCode)\n\n* **@param** _{String}_ language code to check.\n\nReturns Boolean indicating language existance.\nLanguage code parameter can be either a ISO-639-1, ISO-639-2 or ISO-639-3 code.\n\n```js\nvar languageExists = CountryLanguage.languageCodeExists('en');\n```\n\n### .countryCodeExists (countryCode)\n\n* **@param** _{String}_ country code to check.\n\nReturns Boolean indicating country existance.\nCountry code parameter can be either an alpha-2, alpha-3 or numerical code.\n\n```js\nvar countryExists = CountryLanguage.countryCodeExists('GB');\n```\n\n### .getCountry (code, cb)\n\n* **@param** _{String}_ country code\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object containing country info\n\nCountry code can be either an Alpha-2 or Alpha-3 code.\nThe returned object includes the following info:\n\n* ```code_2```: Country alpha-2 code (2 letters)\n* ```code_3```: Country alpha-3 code (3 letters)\n* ```numCode```: Country numeric code\n* ```name```: Country name\n* ```languages```: Array of language objects for each language spoken in the country\n* ```langCultureMs```: Array of language cultures for the country supported by Microsoft©\n\nEach language object in ```languages``` property includes the following info:\n\n* ```iso639_1```: language iso639-1 code (2 letters)\n* ```iso639_2```: language iso639-2 code (3 letters)\n* ```iso639_2en```: language iso639-2 code with some codes derived from English names rather than native names of languages (3 letters)\n* ```iso639_3```: language iso639-3 code (3 letters)\n* ```name```: String array with one or more language names (in English)\n* ```nativeName```: String array with one or more language names (in native language)\n* ```direction```: Language script direction (either 'LTR' or 'RTL') - Left-to-Right, Right-to-Left\n* ```family```: language family\n* ```countries```: Array of country objects where this language is spoken\n\nEach Microsoft© language culture object in ```langCultureMs``` property icludes the following info:\n\n* ```langCultureName```: language culture name\n* ```displayName```: language culture dispaly name\n* ```cultureCode```: language culture code\n\n```js\nCountryLanguage.getCountry('GB', function (err, country) {\n  if (err) {\n    console.log(err);\n  } else {\n    var languagesInGB = country.languages;\n  }\n});\n```\n\n### .getLanguage (code, cb)\n\n* **@param** _{String}_ language code\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object containing language info\n\nLanguage code can be either iso639-1, iso639-2, iso639-2en or iso639-3 code.\nContents of the returned language object are described in **```.getCountry```** method.\n\n```js\nCountryLanguage.getLanguage('en', function (err, language) {\n  if (err) {\n    console.log(err);\n  } else {\n    var countriesSpeakingEN = language.countries;\n  }\n});\n```\n\n### .getCountryLanguages (code, cb)\n\n* **@param** _{String}_ country code\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object array containing country languages info\n\nCountry code can be either an Alpha-2 or Alpha-3 code.\nEach language object contains the following info:\n\n* ```iso639_1```: language iso639-1 code (2 letters)\n* ```iso639_2```: language iso639-2 code with some codes derived from English names rather than native names of languages (3 letters)\n* ```iso639_3```: language iso639-3 code (3 letters)\n\n```js\nCountryLanguage.getCountryLanguages('GB', function (err, languages) {\n  if (err) {\n    console.log(err);\n  } else {\n    languages.forEach(function (languageCodes) {\n      console.log(languageCodes.iso639_1);\n    });\n  }\n});\n```\n\n### .getLanguageCountries (code, cb)\n\n* **@param** _{String}_ language code\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object array containing country info\n\nLanguage code can be either iso639-1, iso639-2, iso639-2en or iso639-3 code.\nEach Country object contains the following info:\n\n* ```code_2```: Country alpha-2 code (2 letters)\n* ```code_3```: Country alpha-3 code (3 letters)\n* ```numCode```: Country numeric code\n\n```js\nCountryLanguage.getLanguageCountries('en', function (err, countries) {\n  if (err) {\n    console.log(err);\n  } else {\n    countries.forEach(function (countryCodes) {\n      console.log(countryCodes.code_3);\n    });\n  }\n});\n```\n\n### .getCountryMsLocales (code, cb)\n\n* **@param** _{String}_ country code\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object array containing Language Cultures info for the country\n\nCountry code can be either an Alpha-2 or Alpha-3 code.\nContents of each Language Culture object are described in **```.getCountry```** method.\n\n```js\nCountryLanguage.getCountryMsLocales('GB', function (err, locales) {\n  if (err) {\n    console.log(err);\n  } else {\n    locales.forEach(function (locale) {\n      console.log(locale.langCultureName);\n    });\n  }\n});\n```\n\n### .getLanguageMsLocales (code, cb)\n\n* **@param** _{String}_ language code\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object array containing Language Cultures info for the language\n\nLanguage code can be either iso639-1, iso639-2, iso639-2en or iso639-3 code.\nContents of each Language Culture object are described in **```.getCountry```** method.\n\n```js\nCountryLanguage.getLanguageMsLocales('en', function (err, locales) {\n  if (err) {\n    console.log(err);\n  } else {\n    locales.forEach(function (locale) {\n      console.log(locale.langCultureName);\n    });\n  }\n});\n```\n\n### .getCountries ()\n\nReturns an array object with info for every country in the world having an ISO 3166 code.\nContents of each country object in the array is described in **```.getCountry```** method.\n\n```js\nvar allCountries = CountryLanguage.getCountries();\n```\n\n### .getLanguages ()\n\nReturns an array object with info for every language in the world having an ISO 639-2 code (and a few more).\nContents of each language object in the array is described in **```.getCountry```** method.\n\n```js\nvar allLanguages = CountryLanguage.getLanguages();\n```\n\n### .getLanguageFamilies ()\n\nReturns an array of strings with the names of each language family.\n\n```js\nvar allLanguageFamilies = CountryLanguage.getLanguageFamilies();\n```\n\n### .getLocales (mode)\n\n* **@param** _{Boolean}_ locale symbols mode\n\nReturns an array of strings with all locale codes.\nIf mode ommited or false, locales with 3 parts will be returned like: **az-Cyrl-AZ**\n\nIf mode is set to true, they will be returned like: **az-AZ-Cyrl**\n\n```js\nvar localesSymbols = CountryLanguage.getLocales();\nvar localesSymbols = CountryLanguage.getLocales(true);\n```\n### .getLanguageFamilyMembers (family, cb)\n\nReturns an array object with info for every language in the world having an ISO 639-2 code (and a few more).\nContents of each language object in the array is described in **```.getCountry```** method.\n\n* **@param** _{String}_ language family name (\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Object}_ object array containing languages info for each language member in the family.\n\nContents of the returned language object are described in **```.getCountry```** method.\n\n```js\nCountryLanguage.getLanguageFamilyMembers('Indo-European', function (err, languages) {\n  if (err) {\n    console.log(err);\n  } else {\n    languages.forEach(function (language) {\n      console.log(language.name);\n    });\n  }\n});\n```\n<br />\n## Notes\n\nFor the following methods:\n\n* **.getLanguageCodes**\n* **.getCountryCodes**\n* **.getCountry**\n* **.getLanguage**\n* **.getCountryLanguages**\n* **.getLanguageCountries**\n* **.getCountryMsLocales**\n* **.getLanguageMsLocales**\n* **.getLanguageFamilyMembers**\n\nthe ```cb``` parameter is optional. When not provided, each method returns either an Object when there is no error, or a String in case of an error.\n<br/>\n<br/>\n<br/>\nAny input parameter (country code, language code, language family name) is case insensitive.\n<br/>\n<br/>\n<br/>\n```Language#nativeName``` string is not displayed correclty on the console for Right-to-Left (RTL) languages. However, there is no issue on string rendering (either on the browser or any text editor).\n\n# License\n\nCopyright (c) 2014 BDSwiss\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bdswiss/country-language.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.7"
}
